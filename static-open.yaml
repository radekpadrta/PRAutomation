trigger: none
pr: none

resources:
  webhooks:
  - webhook: WebhookPRtest         
    connection: WebhookPRtestConnection
    filters:
    - path: "action"
      value: "labeled"

      
variables:
  - name: STATIC_WEBAPP_NAME
    value: '${{parameters.WebhookPRtest.pull_request.id}}-static-variant1'
  - name: STATIC_WEBAPPB_NAME
    value: '${{parameters.WebhookPRtest.pull_request.id}}-static-variant2'
  - name: AZURE_RESOURCE_GROUP
    value: 'POCNextJS'
  - name: LOCATION
    value: 'eastus2'
  - name: NEXT_PUBLIC_MESSAGE
    value: 'This is ENV.Variables for Static Web App'
  - name: StaticEmptyWebApp
    value: 'TestStaticWebApp'
    
stages:
- stage: BuildAndDeploy
  jobs:
  - job: DeployStaticPREnvironment
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Check for Create Static Variant1 label'
      inputs:
        targetType: 'inline'
        script: |
          create_env_found=false
      
          label0="${{parameters.WebhookPRtest.pull_request.labels[0].name}}"
          label1="${{parameters.WebhookPRtest.pull_request.labels[1].name}}"
          label2="${{parameters.WebhookPRtest.pull_request.labels[2].name}}"
          label3="${{parameters.WebhookPRtest.pull_request.labels[3].name}}"
          label4="${{parameters.WebhookPRtest.pull_request.labels[4].name}}"
          label5="${{parameters.WebhookPRtest.pull_request.labels[5].name}}"

          for label in "$label0" "$label1" "$label2" "$label3" "$label4" "$label5"; do
            echo "Webhook1: Processing label: $label"
            if [[ "$label" == "Create Static Variant1" ]]; then
              create_env_found=true
              break
            fi
          done

          if $create_env_found; then
            echo "##vso[task.setvariable variable=createEnvironmentFound]true"
          else
            echo "##vso[task.setvariable variable=createEnvironmentFound]false"
          fi

    - task: AzureCLI@2
      displayName: 'Check if Static Variant1 exists'
      condition: eq(variables['createEnvironmentFound'], 'true')
      inputs:
        azureSubscription: 'radek-padrta-vs-msp'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if az staticwebapp show --name $(STATIC_WEBAPP_NAME) --resource-group $(AZURE_RESOURCE_GROUP) &>/dev/null; then
            echo "Static Web App $(STATIC_WEBAPP_NAME) exists."
            echo "##vso[task.setvariable variable=staticWebAppExists]true"
          else
            echo "Static Web App $(STATIC_WEBAPP_NAME) does not exist."
            echo "##vso[task.setvariable variable=staticWebAppExists]false"
          fi

    - task: GitHubComment@0
      displayName: 'Comment GH - Starting Static Variant1'
      condition: and(eq(variables['createEnvironmentFound'], 'true'), eq(variables['staticWebAppExists'], 'false'))
      inputs:
        gitHubConnection: 'github-nextjsdummytest'
        repositoryName: '$(Build.Repository.Name)'
        id: '${{parameters.WebhookPRtest.number}}'
        comment: |
          ðŸš€ **Creation Started for Static VARIANT1**

          - The static web app creation process has been initiated.
          - This operation typically takes a few minutes to complete.
          - A follow-up comment will be posted here when the process is complete.
    
    - task: AzureCLI@2
      displayName: createEmptyWebApp
      inputs:
        azureSubscription: 'radek-padrta-vs-msp'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Create empty Azure Static Web App
          
          az staticwebapp create \
            --name $(StaticEmptyWebApp) \
            --resource-group $(AZURE_RESOURCE_GROUP) \
            --location $(LOCATION) \
            --sku Free \
            --output none
          
          # Get the deployment token (API token)
          token=$(az staticwebapp secrets list \
            --name $(StaticEmptyWebApp) \
            --resource-group $(AZURE_RESOURCE_GROUP) \
            --query "properties.apiKey" -o tsv)
          
          # Store the token as a pipeline variable
          echo "##vso[task.setvariable variable=AZURE_STATIC_WEB_APP_API_TOKEN;isSecret=true]$token"
          
          # Output the web app name for future reference
          echo "##vso[task.setvariable variable=AZURE_STATIC_WEB_APP_NAME;isOutput=true]$(StaticEmptyWebApp)"
          
          # Print the web app name and a masked version of the token for debugging
          echo "Created empty Static Web App: $(StaticEmptyWebApp)"
          echo "API token (masked): ${token:0:5}...${token: -5}"

    - checkout: self
      submodules: true
    - task: AzureStaticWebApp@0
      inputs:
        app_location: '/variant2'
        api_location: ''
        output_location: '.next'
        azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APP_API_TOKEN)
        deployment_environment: 'preview1'
  
    - task: GitHubComment@0
      displayName: 'Comment GH - Static Variant1 Deployed'
      condition: and(eq(variables['createEnvironmentFound'], 'true'), eq(variables['staticWebAppExists'], 'false'))
      inputs:
        gitHubConnection: 'github-nextjsdummytest'
        repositoryName: '$(Build.Repository.Name)'
        id: '${{parameters.WebhookPRtest.number}}'
        comment: |
          âœ… **Static Web App VARIANT1 is ready!** 

          You can access the application at https://$(STATIC_WEBAPP_NAME).azurestaticapps.net

          Thank you for your patience!

    # Similar steps for Static Variant2 can be added here, following the same pattern as Variant1
    # Remember to use the appropriate variables (e.g., STATIC_WEBAPPB_NAME) and conditions